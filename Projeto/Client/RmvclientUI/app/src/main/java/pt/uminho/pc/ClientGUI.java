/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.uminho.pc;

import processing.core.PApplet;
import processing.net.Client;
import processing.core.PFont;
import java.util.ArrayList;
import java.util.List;

enum State {
    MENU,
    LOGIN,
    REGISTER,
    UNREGISTER,
    PLAY,
    ENTER_CREDENTIALS
}

public class ClientGUI extends PApplet {
    ClientTCP client;
    String username = "";
    String password = "";
    String message = "";
    boolean loggedIn = false;
    PFont font;
    Mouse mouse;
    int WindowWidth = 600;
    int WindowHeight = 400;

    State currentState = State.MENU;

    boolean usernameActive = false;
    boolean passwordActive = false;

    public void settings() {
        size(WindowWidth, WindowHeight);
    }

    public void setup() {
        font = createFont("Arial", 16, true);
        textFont(font);

        client = new ClientTCP(this, "localhost", 1234);
        mouse = new Mouse(this);
        mouse.showCursor();
    }

    public void draw() {
        background(200);
        switch (currentState) {
            case MENU:
                drawMenu();
                break;
            case ENTER_CREDENTIALS:
                drawCredentialsInput();
                break;
            case PLAY:
                drawPlayScreen();
                break;
            default:
                fill(0);
                text("Server Message: " + message, 20, 50);
        }
    }

    boolean button(String label, int x, int y, int w, int h, State nextState) {
        boolean over = mouse.isMouseOver(x, y, w, h);
        fill(over ? 150 : 100);
        rect(x, y, w, h);
        fill(255);
        text(label, x + 10, y + 20);
        if (over && mousePressed) {
            currentState = nextState;
            return true;
        }
        return false;
    }

    private void drawMenu() {
        button("LOGIN", WindowWidth/2-60, 100, 120, 30, State.ENTER_CREDENTIALS);
        button("REGISTER", WindowWidth/2-60, 150, 120, 30, State.ENTER_CREDENTIALS);
        button("UNREGISTER", WindowWidth/2-60, 200, 120, 30, State.ENTER_CREDENTIALS);
        button("PLAY", WindowWidth/2-60, 250, 120, 30, State.PLAY);
    }

    private void drawCredentialsInput() {
        fill(0);
        text("Username:", 80, 80);
        text("Password:", 80, 130);

        stroke(0);
        noFill();
        rect(200, 60, 200, 30);
        fill(0);
        text(username, 205, 80);
        if (usernameActive && ((frameCount / 30) % 2 == 0)) {
            float cx = 205 + textWidth(username);
            stroke(0);
            line(cx, 65, cx, 85);  // smaller blinking cursor height
        }

        // Password field box
        stroke(0);
        noFill();
        rect(200, 110, 200, 30);
        fill(0);
        text(password, 205, 130);
        if (passwordActive && ((frameCount / 30) % 2 == 0)) {
            float cx2 = 205 + textWidth(password);
            stroke(0);
            line(cx2, 115, cx2, 135);  // smaller blinking cursor height
        }

        if (button("Submit", 75, 200, 100, 30, State.MENU)) {
            sendCommand("ENTER_CREDENTIALS\n" + username + "\n" + password);
            username = "";
            password = "";
            usernameActive = passwordActive = false;
        }
    }

    private void drawPlayScreen() {
        fill(0);
        text("Playing the game...", 20, 50);
    }

    public void mousePressed() {
        if (currentState == State.ENTER_CREDENTIALS) {
            if (mouse.isMouseOver(200, 60, 200, 30)) {
                usernameActive = true;
                passwordActive = false;
            } else if (mouse.isMouseOver(200, 110, 200, 30)) {
                usernameActive = false;
                passwordActive = true;
            }
        }
    }

    public void keyPressed() {
        if (currentState == State.ENTER_CREDENTIALS) {
            if (key == BACKSPACE) {
                if (passwordActive && !password.isEmpty()) {
                    password = password.substring(0, password.length() - 1);
                } else if (usernameActive && !username.isEmpty()) {
                    username = username.substring(0, username.length() - 1);
                }
            } else if (key != ENTER && key != RETURN) {
                if (usernameActive && username.length() < 20) {
                    username += key;
                } else if (passwordActive && password.length() < 20) {
                    password += key;
                }
            }
        }
    }

    private void sendCommand(String command) {
        if (client != null) {
            client.write(command + "\n");
        }
    }

    public static void main(String... args) {
        PApplet.main(ClientGUI.class);
    }
}
