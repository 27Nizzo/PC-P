/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.uminho.pc;

import processing.core.PApplet;
import processing.net.Client;
import processing.core.PFont;
import java.util.ArrayList;
import java.util.List;

class Button {
    String label;
    int x, y, width, height;
    boolean isHighlighted;

    Button(String label, int x, int y, int width, int height) {
        this.label = label;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.isHighlighted = false;
    }
}

// Renamed class from App to ClientGUI
public class ClientGUI extends PApplet {
  ClientTCP client;
  String username = "";
  String password = "";
  String message = "";
  boolean loggedIn = false;
  PFont font;
  Mouse mouse;
  int WindowWidth = 600;
  int WindowHeight = 400;

  boolean isEnteringCredentials = false;
  String currentAction = "";

  List<Button> buttons;
  Button submitButton;

  boolean usernameActive = false;
  boolean passwordActive = false;

  public void settings() {
    size(WindowWidth, WindowHeight);
  }

  public void setup() {
    font = createFont("Arial", 16, true);
    textFont(font);
    client = new ClientTCP(this, "localhost", 1234);
    mouse = new Mouse(this);
    mouse.showCursor();
    buttons = new ArrayList<>();
    buttons.add(new Button("LOGIN", WindowWidth / 2 - 60, 100, 120, 30));
    buttons.add(new Button("REGISTER", WindowWidth / 2 - 60, 150, 120, 30));
    buttons.add(new Button("UNREGISTER", WindowWidth / 2 - 60, 200, 120, 30));
    buttons.add(new Button("PLAY", WindowWidth / 2 - 60, 250, 120, 30));
    submitButton = new Button("Submit", 75, 200, 100, 30);
  }

  public void draw() {
    background(200);

    if (isEnteringCredentials) {
        // Draw credentials input screen
        // Labels
        fill(0);
        text("Username:", 80, 80);
        text("Password:", 80, 130);
        // Username field box
        stroke(0);
        noFill();
        rect(200, 60, 200, 30);
        fill(0);
        text(username, 205, 80);
        if (usernameActive && ((frameCount / 30) % 2 == 0)) {
            float cx = 205 + textWidth(username);
            stroke(0);
            line(cx, 65, cx, 85);  // smaller blinking cursor height
        }
        // Password field box
        stroke(0);
        noFill();
        rect(200, 110, 200, 30);
        fill(0);
        text(password, 205, 130);
        if (passwordActive && ((frameCount / 30) % 2 == 0)) {
            float cx2 = 205 + textWidth(password);
            stroke(0);
            line(cx2, 115, cx2, 135);  // smaller blinking cursor height
        }
        stroke(0);
        drawButton(submitButton);
    } else {
        // Display messages from the server
        fill(0);
        text("Server Message: " + message, 20, 50);

        for (Button button : buttons) {
            drawButton(button);
        }
    }
  }

  public void mousePressed() {
    if (isEnteringCredentials) {
        // Focus input fields
        if (mouse.isMouseOver(200, 60, 200, 30)) {
            usernameActive = true; passwordActive = false; return;
        }
        if (mouse.isMouseOver(200, 110, 200, 30)) {
            usernameActive = false; passwordActive = true; return;
        }
        if (mouse.isMouseOver(submitButton.x, submitButton.y, submitButton.width, submitButton.height)) {
            sendCommand(currentAction + "\n" + username + "\n" + password);
            isEnteringCredentials = false;
            username = "";
            password = "";
            usernameActive = false;
            passwordActive = false;
        }
    } else {
        for (Button button : buttons) {
            if (mouse.isMouseOver(button.x, button.y, button.width, button.height)) {
                handleButtonClick(button.label);
            }
        }
    }
  }

  public void mouseMoved() {
    for (Button button : buttons) {
        button.isHighlighted = mouse.isMouseOver(button.x, button.y, button.width, button.height);
    }
    if (isEnteringCredentials) {
        submitButton.isHighlighted = mouse.isMouseOver(submitButton.x, submitButton.y, submitButton.width, submitButton.height);
    }
  }

  public void keyPressed() {
    if (isEnteringCredentials) {
        if (key == BACKSPACE) {
            if (passwordActive && password.length() > 0) {
                password = password.substring(0, password.length() - 1);
            } else if (usernameActive && username.length() > 0) {
                username = username.substring(0, username.length() - 1);
            }
        } else if (key != ENTER && key != RETURN) {
            if (usernameActive && username.length() < 20) {
                username += key;
            } else if (passwordActive && password.length() < 20) {
                password += key;
            }
        }
    } else {
        if (key == BACKSPACE) {
          if (username.length() > 0) {
            username = username.substring(0, username.length() - 1);
          } else if (password.length() > 0) {
            password = password.substring(0, password.length() - 1);
          }
        } else if (key == TAB) {
          // Switch between username and password input
        } else if (key != ENTER && key != RETURN) {
          if (key == ' ') return; // Ignore spaces
          if (username.length() < 20) {
            username += key;
          } else if (password.length() < 20) {
            password += key;
          }
        }
    }
  }

  private void handleButtonClick(String label) {
    switch (label) {
        case "LOGIN":
        case "REGISTER":
        case "UNREGISTER":
            isEnteringCredentials = true;
            currentAction = label;
            break;
        case "PLAY":
            sendCommand("PLAY");
            break;
    }
  }

  private void drawButton(Button button) {
    if (button.isHighlighted) {
      fill(150);
    } else {
      fill(100);
    }
    rect(button.x, button.y, button.width, button.height);
    fill(255);
    text(button.label, button.x + 10, button.y + 20);
  }

  private void sendCommand(String command) {
    if (client != null) {
      client.write(command + "\n");
    }
  }

  public static void main(String... args) {
    PApplet.main(ClientGUI.class);
  }
}
