/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.uminho.pc;

import processing.core.PApplet;
import processing.core.PFont;
import pt.uminho.pc.components.GameBoard;
import pt.uminho.pc.components.Mouse;
import pt.uminho.pc.courier.ClientTCP;
import pt.uminho.pc.courier.Courier;
import pt.uminho.pc.courier.Data;
import pt.uminho.pc.states.*;
import pt.uminho.pc.courier.Exceptions;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class GUI extends PApplet {
    private static final String USERNAME = "admin";
    private static final String PASSWORD = "admin";

    private static String HOST;
    private static int PORT;

    public static void main(String[] args) {
        if (args.length < 2) {
            printUsageAndExit();
        }

        HOST = args[0];
        PORT = parsePort(args[1]);

        PApplet.main(GUI.class);
    }

    private static int parsePort(String portStr) {
        try {
            return Integer.parseInt(portStr);
        } catch (NumberFormatException e) {
            System.err.println("Porto invÃ¡lido: " + portStr);
            System.exit(1);
            return -1; // Nunca chega aqui
        }
    }

    private static void printUsageAndExit() {
        System.out.println("Uso incorreto:");
        System.out.println("Uso: Client [host] [port]");
        System.exit(1);
    }

    // Components
    private Mouse mouse;
    private GameBoard board;
    private Data data;
    private ClientTCP client;
    
    // UI state
    private String username = "";
    private String password = "";
    private String message = "";
    private boolean loggedIn = false;
    private PFont font;
    private int WindowWidth = 600;
    private int WindowHeight = 400;

    private State currentState = State.MENU;
    private Map<State, GameState> states = new HashMap<>();
    
    // Error handling
    private String errorMessage = "";
    private String stateBeforeError = "";
    
    // Game states
    private PlayState playState;
    private MenuState menuState;
    private CredentialsState credentialsState;
    private RegisterState registerState;
    private SearchingState searchingState;
    private GameOverState gameOverState;
    private ErrorState errorState;

    public void settings() {
        size(WindowWidth, WindowHeight);
    }

    public void setup() {
        this.mouse = new Mouse(this);
        this.board = new GameBoard(15, 24, WindowWidth, WindowHeight);
        this.data = new Data();

        this.client = null;
        try {
            client = new ClientTCP(HOST, PORT);
        } catch (IOException e) {
            showError(e.getMessage());
        }

        Thread courierThread = new Thread(new Courier(client, mouse, board, data));
        courierThread.start();

        // Initialize game states
        initializeStates();
        
        mouse.showCursor();
    }
    
    private void initializeStates() {
        playState = new PlayState();
        menuState = new MenuState();
        credentialsState = new CredentialsState();
        registerState = new RegisterState();
        searchingState = new SearchingState();
        gameOverState = new GameOverState(playState);
        errorState = new ErrorState();
        
        states.put(State.PLAY, playState);
        states.put(State.MENU, menuState);
        states.put(State.ENTER_CREDENTIALS, credentialsState);
        states.put(State.REGISTER, registerState);
        states.put(State.SEARCHING, searchingState);
        states.put(State.GAME_OVER, gameOverState);
        states.put(State.ERROR, errorState);
    }

    public void draw() {
        GameState currentGameState = states.get(currentState);
        if (currentGameState != null) {
            currentGameState.draw(this);
        }
    }

    public void mousePressed() {
        GameState currentGameState = states.get(currentState);
        if (currentGameState != null) {
            currentGameState.mousePressed(this);
        }
    }

    public void keyPressed() {
        GameState currentGameState = states.get(currentState);
        if (currentGameState != null) {
            currentGameState.keyPressed(this, keyCode, key);
        }
    }
    
    public void switchState(State newState) {
        if (newState == State.SEARCHING && currentState != State.SEARCHING) {
            if (playState != null) {
                playState.reset();
            }
        }
        
        currentState = newState;
    }
    
    public void showError(String message) {
        errorMessage = message;
        stateBeforeError = currentState.toString();
        currentState = State.ERROR;
    }
    
    public boolean authenticate() {
        System.out.println("Authenticating, username: " + username + " password: " + password);

        try {
            client.login(username, password);
            loggedIn = true;
            return true;
        } catch (IOException e) {
            showError(e.getMessage());
        } catch (Exceptions.InvalidPassword e) {
            showError("Invalid password");
        } catch (Exceptions.InvalidAccount e) {
            showError("Invalid account");
        }

        return false;
    }
    
    public boolean registerAccount(String username, String password) throws IOException, Exceptions.InvalidPassword, Exceptions.UserExists {
        System.out.println("Registering new account, username: " + username + " password: " + password);
        
        client.create_account(username, password);
        return true;
    }
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
    public boolean isLoggedIn() {
        return loggedIn;
    }
    
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public String getStateBeforeError() {
        return stateBeforeError;
    }
}
