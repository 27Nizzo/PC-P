/*
 * This source file was generated by the Gradle 'init' task
 */
package pt.uminho.pc;

import processing.core.PApplet;
import processing.core.PFont;
import pt.uminho.pc.components.Board;
import pt.uminho.pc.components.Mouse;
import pt.uminho.pc.courier.ClientTCP;
import pt.uminho.pc.courier.Courier;
import pt.uminho.pc.courier.Data;
import pt.uminho.pc.courier.Exceptions;

import java.io.IOException;

public class GUI extends PApplet {
    private static String HOST;
    private static int PORT;

    public static void main(String[] args) {
        if (args.length < 2) {
            printUsageAndExit();
        }

        HOST = args[0];
        PORT = parsePort(args[1]);

        PApplet.main(GUI.class);
    }

    private static int parsePort(String portStr) {
        try {
            return Integer.parseInt(portStr);
        } catch (NumberFormatException e) {
            System.err.println("Porto invÃ¡lido: " + portStr);
            System.exit(1);
            return -1; // Nunca chega aqui
        }
    }

    private static void printUsageAndExit() {
        System.out.println("Uso incorreto:");
        System.out.println("Uso: Client [host] [port]");
        System.exit(1);
    }

    Mouse mouse;
    Board board;
    Data data;

    ClientTCP client;

    String username = "";
    String password = "";
    String message = "";
    boolean loggedIn = false;
    PFont font;
    int WindowWidth = 600;
    int WindowHeight = 400;

    State currentState = State.MENU;

    boolean usernameActive = false;
    boolean passwordActive = false;

    private String errorMessage = "";
    private String stateBeforeError = "";

    public void settings() {
        size(WindowWidth, WindowHeight);
    }

    public void setup() {
        this.mouse = new Mouse(this);
        this.board = new Board();
        this.data = new Data();

        this.client = null;
        try {
            client = new ClientTCP(HOST, PORT);
        } catch (IOException e) {
            showError(e.getMessage());
        }

        Thread courierThread = new Thread(new Courier(client, mouse, board, data));
        courierThread.start();

        mouse.showCursor();
    }

    public void draw() {
        background(200);

        switch (currentState) {
            case MENU:
                drawMenu();
                break;
            case ENTER_CREDENTIALS:
                drawCredentialsInput();
                break;
            case PLAY:
                drawPlayScreen();
                break;
            case ERROR:
                drawErrorScreen();
                break;
            default:
                fill(0);
                text("Server Message: " + message, 20, 50);
        }
    }

    private void showError(String message) {
        errorMessage = message;
        stateBeforeError = currentState.toString();
        currentState = State.ERROR;
    }

    private void drawErrorScreen() {
        // Draw full screen background first
        fill(200);
        rect(0, 0, width, height);
        
        // Draw error popup
        fill(240, 20, 20);
        rect(width/2 - 150, height/2 - 100, 300, 200);
        
        // Error message
        fill(255);
        textAlign(CENTER, CENTER);
        text("ERROR", width/2, height/2 - 70);
        textAlign(CENTER, CENTER);
        text(errorMessage, width/2, height/2);

        // Disable mouse
        mouse.hideCursor();
        
        // Reset text alignment
        textAlign(LEFT, BASELINE);
    }

    boolean button(String label, int x, int y, int w, int h, State nextState) {
        boolean over = mouse.isMouseOver(x, y, w, h);
        fill(over ? 150 : 100);
        rect(x, y, w, h);
        fill(255);
        text(label, x + 10, y + 20);

        if (over && mousePressed) {
            currentState = nextState;
            return true;
        }
        return false;
    }

    private void drawMenu() {
        button("LOGIN", WindowWidth/2-60, 100, 120, 30, State.ENTER_CREDENTIALS);
        button("REGISTER", WindowWidth/2-60, 150, 120, 30, State.ENTER_CREDENTIALS);
        button("UNREGISTER", WindowWidth/2-60, 200, 120, 30, State.ENTER_CREDENTIALS);
        button("PLAY", WindowWidth/2-60, 250, 120, 30, State.PLAY);
    }

    private void drawCredentialsInput() {
        fill(0);
        text("Username:", 80, 80);
        text("Password:", 80, 130);

        stroke(0);
        noFill();
        rect(200, 60, 200, 30);
        fill(0);
        text(username, 205, 80);
        if (usernameActive && ((frameCount / 30) % 2 == 0)) {
            float cx = 205 + textWidth(username);
            stroke(0);
            line(cx, 65, cx, 85);  // smaller blinking cursor height
        }

        // Password field box
        stroke(0);
        noFill();
        rect(200, 110, 200, 30);
        fill(0);
        text(password, 205, 130);
        if (passwordActive && ((frameCount / 30) % 2 == 0)) {
            float cx2 = 205 + textWidth(password);
            stroke(0);
            line(cx2, 115, cx2, 135);  // smaller blinking cursor height
        }

        if (button("Submit", 75, 200, 100, 30, State.MENU)) {
            try {
                this.client.login(username, password);
            } catch (IOException e) {
                throw new RuntimeException(e);
            } catch (Exceptions.InvalidPassword e) {
                throw new RuntimeException(e);
            } catch (Exceptions.InvalidAccount e) {
                throw new RuntimeException(e);
            }

            username = "";
            password = "";
            usernameActive = passwordActive = false;
        }
    }

    private void drawPlayScreen() {
        fill(0);
        text("Playing the game...", 20, 50);
    }

    public void mousePressed() {
        if (currentState == State.ENTER_CREDENTIALS) {
            if (mouse.isMouseOver(200, 60, 200, 30)) {
                usernameActive = true;
                passwordActive = false;
            } else if (mouse.isMouseOver(200, 110, 200, 30)) {
                usernameActive = false;
                passwordActive = true;
            }
        } else if (currentState == State.ERROR) {
            // Check if OK button is clicked
            if (mouseX > width/2 - 40 && mouseX < width/2 + 40 && 
                mouseY > height/2 + 50 && mouseY < height/2 + 80) {
                currentState = State.valueOf(stateBeforeError);
            }
        }
    }

    public void keyPressed() {
        if (currentState == State.ENTER_CREDENTIALS) {
            if (key == BACKSPACE) {
                if (passwordActive && !password.isEmpty()) {
                    password = password.substring(0, password.length() - 1);
                } else if (usernameActive && !username.isEmpty()) {
                    username = username.substring(0, username.length() - 1);
                }
            } else if (key != ENTER && key != RETURN) {
                if (usernameActive && username.length() < 20) {
                    username += key;
                } else if (passwordActive && password.length() < 20) {
                    password += key;
                }
            }
        }
    }
}
